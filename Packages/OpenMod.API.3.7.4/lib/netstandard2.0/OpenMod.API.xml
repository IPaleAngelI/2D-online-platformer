<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenMod.API</name>
    </assembly>
    <members>
        <member name="T:OpenMod.API.Commands.ICommand">
            <summary>
            Represents a command.
            </summary>
        </member>
        <member name="M:OpenMod.API.Commands.ICommand.ExecuteAsync">
            <summary>
            Executes the command.
            </summary>
        </member>
        <member name="T:OpenMod.API.Commands.ICommandActor">
            <summary>
            Represents an actor that can execute commands.
            </summary>
        </member>
        <member name="M:OpenMod.API.Commands.ICommandActor.PrintMessageAsync(System.String)">
            <summary>
            Prints a message to the actor.
            </summary>
            <param name="message">The message to print.</param>
        </member>
        <member name="M:OpenMod.API.Commands.ICommandActor.PrintMessageAsync(System.String,System.Drawing.Color)">
            <summary>
            Prints a colored message to the actor.
            </summary>
            <param name="message">The message to print.</param>
            <param name="color">The color of the message.</param>
        </member>
        <member name="T:OpenMod.API.Commands.ICommandContext">
            <summary>
            Represents a command context.
            </summary>
        </member>
        <member name="P:OpenMod.API.Commands.ICommandContext.ParentContext">
            <summary>
            Gets the parent command context.
            </summary>
            <example>
            If the command was entered as "/mycommand sub", this will return the parent context with parameters "sub".
            </example>
        </member>
        <member name="P:OpenMod.API.Commands.ICommandContext.ChildContext">
            <summary>
            Gets the child command context.
            </summary>
        </member>
        <member name="P:OpenMod.API.Commands.ICommandContext.RootContext">
            <summary>
            Gets the root context.
            </summary>
        </member>
        <member name="P:OpenMod.API.Commands.ICommandContext.CommandPrefix">
            <summary>
                <para>Gets the prefix used to call the command.</para>
                <para>Useful for sending command usage messages.</para>
                <para>
                    Child commands will include their parents.
                </para>
            </summary>
            <example>
                <para>
                    If the command was executed using "/mycommand", it will be "/", when it was executed using "!mycommand", it
                    will be "!".
                </para>
                <para>
                    If the command was a ChildrenCommand "sub", "/mycommand sub" will return "/mycommand" as prefix.
                </para>
            </example>
        </member>
        <member name="P:OpenMod.API.Commands.ICommandContext.CommandAlias">
            <summary>
            Gets the alias or name used to execute the command.
            </summary>
        </member>
        <member name="P:OpenMod.API.Commands.ICommandContext.Actor">
            <summary>
            Gets the actor executing command.
            </summary>
        </member>
        <member name="P:OpenMod.API.Commands.ICommandContext.Parameters">
            <summary>
            Gets the parameters of the command.
            </summary>
        </member>
        <member name="P:OpenMod.API.Commands.ICommandContext.CommandRegistration">
            <summary>
            Gets the command registration. Returns null if the command was not found.
            </summary>
        </member>
        <member name="P:OpenMod.API.Commands.ICommandContext.Exception">
            <summary>
            Gets the exception thrown by the command if one was thrown; otherwise, <b>null</b>.
            </summary>
        </member>
        <member name="P:OpenMod.API.Commands.ICommandContext.Data">
            <summary>
            Gets the data for the context. Can be used by plugins for passing arbritrary data to the command context.
            </summary>
        </member>
        <member name="P:OpenMod.API.Commands.ICommandContext.ServiceProvider">
            <summary>
            Gets the service provider for the command context.
            </summary>
        </member>
        <member name="T:OpenMod.API.Commands.ICommandContextBuilder">
            <summary>
            The service for creating command contexts.
            </summary>
        </member>
        <member name="M:OpenMod.API.Commands.ICommandContextBuilder.CreateContext(OpenMod.API.Commands.ICommandActor,System.String[],System.String,System.Collections.Generic.IReadOnlyCollection{OpenMod.API.Commands.ICommandRegistration})">
            <summary>
            Creates a command context.
            </summary>
            <param name="actor">The command actor.</param>
            <param name="args">The arguments for the command.</param>
            <param name="prefix">The prefix for the command. Can be empty.</param>
            <param name="commandRegistrations">The command registrations used for looking up commands and their child commands. See <see cref="M:OpenMod.API.Commands.ICommandStore.GetCommandsAsync"/>.</param>
            <returns>The created command context.</returns>
        </member>
        <member name="T:OpenMod.API.Commands.ICommandExecutor">
            <summary>
            The service for executing commands.
            </summary>
        </member>
        <member name="M:OpenMod.API.Commands.ICommandExecutor.ExecuteAsync(OpenMod.API.Commands.ICommandActor,System.String[],System.String)">
            <summary>
            Executes a command.
            </summary>
            <param name="actor">The command actor.</param>
            <param name="args">The command args.</param>
            <param name="prefix">The command prefix. Can be empty.</param>
            <returns>The created command context.</returns>
        </member>
        <member name="T:OpenMod.API.Commands.ICommandParameterResolveProvider">
            <summary>
            A provider for resolving command parameters.
            </summary>
        </member>
        <member name="M:OpenMod.API.Commands.ICommandParameterResolveProvider.Supports(System.Type)">
            <summary>
            Determines whether the given type is supported by this resolver.
            </summary>
        </member>
        <member name="M:OpenMod.API.Commands.ICommandParameterResolveProvider.ResolveAsync(System.Type,System.String)">
            <summary>
            Resolves an object of the given type from the input.
            </summary>
        </member>
        <member name="T:OpenMod.API.Commands.ICommandParameterResolver">
            <summary>
            The service for resolving command parameters.
            </summary>
        </member>
        <member name="M:OpenMod.API.Commands.ICommandParameterResolver.ResolveAsync(System.Type,System.String)">
            <summary>
            Resolves an object of the given type from the input.
            </summary>
        </member>
        <member name="T:OpenMod.API.Commands.ICommandParameters">
            <summary>
            Represents the parameters of a command.
            </summary>
            <remarks>
             When a command was entered as "/mycommand test 5 b", this class will handle and represent "test", "5" and "b".
            </remarks>
        </member>
        <member name="P:OpenMod.API.Commands.ICommandParameters.Item(System.Int32)">
            <summary>
                Gets the n. command parameter starting from zero.
                <para>Index must be less than <see cref="P:OpenMod.API.Commands.ICommandParameters.Length">length</see> and not negative.</para>
            </summary>
            <exception cref="T:System.ArgumentException">
                When <i>index</i> is equal or greater than
                <see cref="P:OpenMod.API.Commands.ICommandParameters.Length">length</see> or negative.
            </exception>
            <param name="index">The zero-based index of the parameter.</param>
            <seealso cref="T:System.ArgumentOutOfRangeException" />
            <returns>The n. command parameter as string.</returns>
        </member>
        <member name="P:OpenMod.API.Commands.ICommandParameters.Length">
            <summary>
            Gets the amount of parameters.
            </summary>
            <example>
            If the command was entered as "/mycommand test 5 b", it would return "3".
            </example>
        </member>
        <member name="M:OpenMod.API.Commands.ICommandParameters.GetAsync``1(System.Int32)">
            <summary>
                <para>Gets the parameter value at the given index. The value will parsed to the given type.</para>
                <para>Types like <i>IPlayer</i>, <i>IOnlinePlayer</i>, etc. are supported.</para>
            </summary>
            <example>
                Assume the command was entered as "/mycommand test 5 b". <br />
                <c>Get&lt;string&gt;(0)</c> would be equal to "test" (string). <br />
                <c>Get&lt;int&gt;(1)</c> would be equal to 5 (int). <br />
                <c>Get&lt;string&gt;(1)</c> would be equal to "5" (string). <br />
                <c>Get&lt;string&gt;(2)</c> would be equal to "b" (string).
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">
                when <i>index</i> is equal or greater than
                <see cref="P:OpenMod.API.Commands.ICommandParameters.Length">length</see> or negative.
            </exception>
            <typeparam name="T">The type to parse the parameter as.</typeparam>
            <param name="index">The zero-based parameter index.</param>
            <returns>The parsed parameter value.</returns>
        </member>
        <member name="M:OpenMod.API.Commands.ICommandParameters.GetAsync(System.Int32,System.Type)">
            <summary>
                <inheritdoc cref="M:OpenMod.API.Commands.ICommandParameters.GetAsync``1(System.Int32)" />
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <inheritdoc cref="M:OpenMod.API.Commands.ICommandParameters.GetAsync``1(System.Int32)" />
            </exception>
            <param name="index">
                <inheritdoc cref="M:OpenMod.API.Commands.ICommandParameters.GetAsync``1(System.Int32)" />
            </param>
            <param name="type">The type to parse the parameter as.</param>
            <returns>
                <inheritdoc cref="M:OpenMod.API.Commands.ICommandParameters.GetAsync``1(System.Int32)" />
            </returns>
        </member>
        <member name="M:OpenMod.API.Commands.ICommandParameters.GetAsync``1(System.Int32,``0)">
            <summary>
                <inheritdoc cref="M:OpenMod.API.Commands.ICommandParameters.GetAsync``1(System.Int32)" />
            </summary>
            <typeparam name="T">
                <inheritdoc cref="M:OpenMod.API.Commands.ICommandParameters.GetAsync``1(System.Int32)" />
            </typeparam>
            <param name="index">
                <inheritdoc cref="M:OpenMod.API.Commands.ICommandParameters.GetAsync``1(System.Int32)" />
            </param>
            <param name="defaultValue">The default return value.</param>
            <returns>
                the parsed parameter value if the given index was valid and the parameter could be parsed to the given type;
                otherwise <i>defaultValue</i>.
            </returns>
        </member>
        <member name="M:OpenMod.API.Commands.ICommandParameters.GetAsync(System.Int32,System.Type,System.Object)">
            <summary>
                <inheritdoc cref="M:OpenMod.API.Commands.ICommandParameters.GetAsync``1(System.Int32,``0)" />
            </summary>
            <param name="index">
                <inheritdoc cref="M:OpenMod.API.Commands.ICommandParameters.GetAsync``1(System.Int32,``0)" />
            </param>
            <param name="type">The type to parse the parameters as.</param>
            <param name="defaultValue">The default return value.</param>
            <returns>
                <inheritdoc cref="M:OpenMod.API.Commands.ICommandParameters.GetAsync``1(System.Int32,``0)" />
            </returns>
        </member>
        <member name="M:OpenMod.API.Commands.ICommandParameters.TryGet``1(System.Int32,``0@)">
            <summary>
                Tries to get and parse a parameter. See <see cref="M:OpenMod.API.Commands.ICommandParameters.GetAsync``1(System.Int32)" />.
            </summary>
            <typeparam name="T">
                <inheritdoc cref="M:OpenMod.API.Commands.ICommandParameters.GetAsync``1(System.Int32)" />
            </typeparam>
            <param name="index">
                <inheritdoc cref="M:OpenMod.API.Commands.ICommandParameters.GetAsync``1(System.Int32)" />
            </param>
            <param name="value">The parsed parameter value.</param>
            <returns>
                <b>true</b> if the given index was valid and the parameter could be parsed to the given type; otherwise
                <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenMod.API.Commands.ICommandParameters.GetArgumentLine(System.Int32)">
            <summary>
                Returns the joined arguments starting from the given position.
            </summary>
            <example>
                If the command was entered as "/mycommand dosomething a bla c" it would return "a bla c" if startPosition was 1.
            </example>
            <param name="startPosition">The zero based position to start from.</param>
            <exception cref="T:System.IndexOutOfRangeException">If startPosition is greater than or equal <see cref="P:OpenMod.API.Commands.ICommandParameters.Length">length</see>.</exception>
            <returns>he joined arguments starting from the given position</returns>
        </member>
        <member name="M:OpenMod.API.Commands.ICommandParameters.GetArgumentLine(System.Int32,System.Int32)">
            <summary>
                Returns the joined arguments starting at the given position.
            </summary>
            <example>
                If the command was entered as "/mycommand dosomething a bla c" it would return "a bla" if startPosition was 1 and
                endPosition was 2.
            </example>
            <param name="startPosition">The zero based position to start from.</param>
            <param name="endPosition">The end position.</param>
            <exception cref="T:System.IndexOutOfRangeException">
                If startPosition or endPosition is greater than or equal
                <see cref="P:OpenMod.API.Commands.ICommandParameters.Length">length</see>.
            </exception>
            <exception cref="T:System.ArgumentException">If startPosition is greater than or equal endPosition.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If startPosition or endPosition is greather than <see cref="P:OpenMod.API.Commands.ICommandParameters.Length"/>.</exception>
            <returns>he joined arguments starting from the given position</returns>
        </member>
        <member name="M:OpenMod.API.Commands.ICommandParameters.TryGet(System.Int32,System.Type,System.Object@)">
            <summary>
                <inheritdoc cref="M:OpenMod.API.Commands.ICommandParameters.TryGet``1(System.Int32,``0@)" />
            </summary>
            <param name="index">
                <inheritdoc cref="M:OpenMod.API.Commands.ICommandParameters.TryGet``1(System.Int32,``0@)" />
            </param>
            <param name="type">The type to parse the parameters as.</param>
            <param name="value">The parsed parameter value.</param>
            <returns>
                <inheritdoc cref="M:OpenMod.API.Commands.ICommandParameters.TryGet``1(System.Int32,``0@)" />
            </returns>
        </member>
        <member name="M:OpenMod.API.Commands.ICommandParameters.ToArray">
            <summary>
                Gets the parameters as string array.
            </summary>
            <returns>the parameters as string array.</returns>
        </member>
        <member name="M:OpenMod.API.Commands.ICommandParameters.ToList">
            <summary>
                Gets the parameters as string list.
            </summary>
            <returns>the parameters as string list.</returns>
        </member>
        <member name="T:OpenMod.API.Commands.ICommandPermissionBuilder">
            <summary>
            The service for building command permissions. In other words; this service determines what permission a command requires.
            </summary>
        </member>
        <member name="M:OpenMod.API.Commands.ICommandPermissionBuilder.GetPermission(OpenMod.API.Commands.ICommandRegistration)">
            <summary>
            Gets the permission required to use the given command.
            </summary>
            <param name="command">The command to get the permission for.</param>
            <returns>The permission required to use the command.</returns>
        </member>
        <member name="M:OpenMod.API.Commands.ICommandPermissionBuilder.GetPermission(OpenMod.API.Commands.ICommandRegistration,System.Collections.Generic.IReadOnlyCollection{OpenMod.API.Commands.ICommandRegistration})">
            <summary>
            Gets the permission required to use the given command.
            </summary>
            <param name="command">The command to get the permission for.</param>
            <param name="commands">The available commands used for determining child command permissions.</param>
            <returns>The permission required to use the command.</returns>
        </member>
        <member name="T:OpenMod.API.Commands.ICommandRegistration">
            <summary>
            Represents a registered command.
            </summary>
        </member>
        <member name="P:OpenMod.API.Commands.ICommandRegistration.Component">
            <summary>
            Gets the owner component of the command.
            </summary>
        </member>
        <member name="P:OpenMod.API.Commands.ICommandRegistration.Id">
            <summary>
            Gets the unique ID of the command.
            </summary>
        </member>
        <member name="P:OpenMod.API.Commands.ICommandRegistration.Name">
            <summary>
                <para>Gets the primary name of the command, which will be used to execute it.</para>
                <para>The primary name overrides any <see cref="P:OpenMod.API.Commands.ICommandRegistration.Aliases">aliases</see> of other commands by default.</para>
            </summary>
            <example>
                If the name is "heal", the command will be usually be called using "/heal" (or just "heal" in console)
            </example>
        </member>
        <member name="P:OpenMod.API.Commands.ICommandRegistration.Aliases">
            <summary>
            Gets the aliases of the command, which are often shorter versions of the primary name.
            </summary>
            <example>
            If the aliases are "h" and "he", the command can be executed using "/h" or "/he".
            </example>
        </member>
        <member name="P:OpenMod.API.Commands.ICommandRegistration.PermissionRegistrations">
            <summary>
            The permission registrations for this command.
            </summary>
        </member>
        <member name="P:OpenMod.API.Commands.ICommandRegistration.Description">
            <summary>
            Gets the description of the command.
            </summary>
        </member>
        <member name="P:OpenMod.API.Commands.ICommandRegistration.Syntax">
             <summary>
                 Gets the command syntax will be shown to the actor when the command was not used correctly.
                 <para>An output for the above example could be "/heal [player] &lt;amount&gt;".</para>
                 <para>The syntax should not contain Child Command usage.</para>
             </summary>
             <remarks>
                 [...] means optional argument and &lt;...&gt; means required argument, so in this case "player" is an optional
                 argument while "amount" is a required one.
             </remarks>
             <example>
                 <c>"[player] &lt;amount&gt;"</c>
             </example>
            
        </member>
        <member name="P:OpenMod.API.Commands.ICommandRegistration.Priority">
            <summary>
            Gets the priority for this command. Used in case of conflicting commands for determining which command to execute.
            The command with higher priority will be preferred.
            </summary>
        </member>
        <member name="P:OpenMod.API.Commands.ICommandRegistration.ParentId">
            <summary>
            Gets the ID of the parent command. Returns if the command does not have a parent command.
            </summary>
        </member>
        <member name="P:OpenMod.API.Commands.ICommandRegistration.IsEnabled">
            <summary>
            <b>True</b> if the command is enabled; otherwise, <b>false</b>.
            </summary>
        </member>
        <member name="M:OpenMod.API.Commands.ICommandRegistration.SupportsActor(OpenMod.API.Commands.ICommandActor)">
            <summary>
            Checks if the given actor can use this command.
            </summary>
            <param name="actor">The actor to check.</param>
        </member>
        <member name="M:OpenMod.API.Commands.ICommandRegistration.Instantiate(System.IServiceProvider)">
            <summary>
            Instantiates a new command instance for execution.
            </summary>
            <param name="serviceProvider">The service provider of the command scope.</param>
            <return>The instantiated command.</return>
        </member>
        <member name="T:OpenMod.API.Commands.ICommandSource">
            <summary>
            Represents a command source that provides commands.
            </summary>
        </member>
        <member name="M:OpenMod.API.Commands.ICommandSource.GetCommandsAsync">
            <summary>
            Gets the commands from the command source.
            </summary>
            <returns>Commands of this provider.</returns>
        </member>
        <member name="T:OpenMod.API.Commands.ICommandStore">
            <summary>
            The service for getting commands.
            </summary>
        </member>
        <member name="M:OpenMod.API.Commands.ICommandStore.GetCommandsAsync">
            <summary>
            Gets the commands of all registered <see cref="T:OpenMod.API.Commands.ICommandSource"/>s.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenMod.API.Commands.ICommandStore.InvalidateAsync">
            <summary>
            Refreshes the cache. Must be used if a command source has added or removed commands.
            </summary>
        </member>
        <member name="T:OpenMod.API.Commands.ICurrentCommandContextAccessor">
            <summary>
            The service for getting the current command context.
            </summary>
        </member>
        <member name="P:OpenMod.API.Commands.ICurrentCommandContextAccessor.Context">
            <summary>
            Gets or sets the command context processed by the current thread. Returns null if the current thread does not handle a command currently.
            </summary>
        </member>
        <member name="T:OpenMod.API.Commands.UserFriendlyException">
            <summary>
            Represents exceptions of which the message should be shown to the command actor.
            </summary>
        </member>
        <member name="T:OpenMod.API.Eventing.EventListenerPriority">
            <summary>
            Represents the priority of an event listener. The invocation order is based on from lowest to highest.
            </summary>
        </member>
        <member name="F:OpenMod.API.Eventing.EventListenerPriority.Lowest">
            <summary>
            The lowest priority. Lowest priority event listeners are executed first.
            </summary>
        </member>
        <member name="F:OpenMod.API.Eventing.EventListenerPriority.Low">
            <summary>
            The low priority.
            </summary>
        </member>
        <member name="F:OpenMod.API.Eventing.EventListenerPriority.Normal">
            <summary>
            The normal priority. This is the default value if no priority is set.
            </summary>
        </member>
        <member name="F:OpenMod.API.Eventing.EventListenerPriority.High">
            <summary>
            The high priority.
            </summary>
        </member>
        <member name="F:OpenMod.API.Eventing.EventListenerPriority.Highest">
            <summary>
            The highest priority. 
            </summary>
        </member>
        <member name="F:OpenMod.API.Eventing.EventListenerPriority.Monitor">
            <summary>
            The monitor priority.
            Monitor priority event listeners are called last and must not change event state.
            They can also not cancel or uncancel events.
            </summary>
        </member>
        <member name="T:OpenMod.API.Eventing.ICancellableEvent">
            <summary>
            Represents a cancellable event.
            </summary>
        </member>
        <member name="P:OpenMod.API.Eventing.ICancellableEvent.IsCancelled">
            <summary>
            Gets or sets if the event action should be cancelled.
            </summary>
        </member>
        <member name="T:OpenMod.API.Eventing.IEvent">
            <summary>
            Represents a event.
            </summary>
        </member>
        <member name="P:OpenMod.API.Eventing.IEvent.Arguments">
            <summary>
            The arguments of the event. Based on the properties of the event object.
            </summary>
        </member>
        <member name="P:OpenMod.API.Eventing.IEvent.Data">
            <summary>
            Arbitrary additonal event data that can be set and used by plugins. 
            </summary>
        </member>
        <member name="T:OpenMod.API.Eventing.EventCallback`1">
            <summary>
            The type safe callback for event notifications.
            </summary>
            <typeparam name="TEvent">The event type.</typeparam>
            <param name="serviceProvider">The service provider object.</param>
            <param name="sender">The event sender.</param>
            <param name="event">The event instance.</param>
        </member>
        <member name="T:OpenMod.API.Eventing.EventCallback">
            <summary>
            The callback for event notifications.
            </summary>
            <param name="serviceProvider">The service provider object.</param>
            <param name="sender">The event sender.</param>
            <param name="event">The event instance.</param>
        </member>
        <member name="T:OpenMod.API.Eventing.EventExecutedCallback">
            <summary>
            The callback called after an event has been emitted and all listeners have been notified.
            </summary>
            <param name="event"></param>
        </member>
        <member name="T:OpenMod.API.Eventing.IEventBus">
            <summary>
            The service for managing events and event subscriptions.
            </summary>
        </member>
        <member name="M:OpenMod.API.Eventing.IEventBus.Subscribe(OpenMod.API.IOpenModComponent,System.String,OpenMod.API.Eventing.EventCallback)">
            <summary>
            Subscribes a component to an event.
            </summary>
            <param name="component">The component.</param>
            <param name="eventName">The event to subscribe to.</param>
            <param name="callback">The action to execute. See <see cref="T:OpenMod.API.Eventing.EventCallback" /></param>
            <returns>A disposable that unsubscribes the callback when disposed.</returns>
        </member>
        <member name="M:OpenMod.API.Eventing.IEventBus.Subscribe(OpenMod.API.IOpenModComponent,System.String,OpenMod.API.Eventing.EventCallback,OpenMod.API.Eventing.IEventListenerOptions)">
            <summary>
            Subscribes a component to an event.
            </summary>
            <param name="component">The component.</param>
            <param name="eventName">The event to subscribe to.</param>
            <param name="callback">The action to execute. See <see cref="T:OpenMod.API.Eventing.EventCallback" /></param>
            <param name="options">The extended options for this event subscription.</param>
            <returns>A disposable that unsubscribes the callback when disposed.</returns>
        </member>
        <member name="M:OpenMod.API.Eventing.IEventBus.Subscribe``1(OpenMod.API.IOpenModComponent,OpenMod.API.Eventing.EventCallback{``0})">
            <summary>
            <inheritdoc cref="M:OpenMod.API.Eventing.IEventBus.Subscribe(OpenMod.API.IOpenModComponent,System.String,OpenMod.API.Eventing.EventCallback)" />
            </summary>
            <param name="component">The component.</param>
            <param name="callback">The action to execute after all listeners were notified.</param>
            <typeparam name="TEvent">The event to subscribe to.</typeparam>
            <returns>A disposable that unsubscribes the callback when disposed.</returns>
        </member>
        <member name="M:OpenMod.API.Eventing.IEventBus.Subscribe``1(OpenMod.API.IOpenModComponent,OpenMod.API.Eventing.EventCallback{``0},OpenMod.API.Eventing.IEventListenerOptions)">
            <summary>
            <inheritdoc cref="M:OpenMod.API.Eventing.IEventBus.Subscribe(OpenMod.API.IOpenModComponent,System.String,OpenMod.API.Eventing.EventCallback)" />
            </summary>
            <param name="component">The component.</param>
            <param name="callback">The action to execute after all listeners were notified.</param>
            <param name="options">The extended options for this event subscription.</param>
            <typeparam name="TEvent">The event to subscribe to.</typeparam>
            <returns>A disposable that unsubscribes the callback when disposed.</returns>
        </member>
        <member name="M:OpenMod.API.Eventing.IEventBus.Subscribe(OpenMod.API.IOpenModComponent,System.Type,OpenMod.API.Eventing.EventCallback)">
            <summary>
            <inheritdoc cref="M:OpenMod.API.Eventing.IEventBus.Subscribe(OpenMod.API.IOpenModComponent,System.String,OpenMod.API.Eventing.EventCallback)" />
            </summary>
            <param name="component">The component.</param>
            <param name="eventType">The event to subscribe to.</param>
            <param name="callback">The action to execute after all listeners were notified.</param>
            <returns>A disposable that unsubscribes the callback when disposed.</returns>
        </member>
        <member name="M:OpenMod.API.Eventing.IEventBus.Subscribe(OpenMod.API.IOpenModComponent,System.Type,OpenMod.API.Eventing.EventCallback,OpenMod.API.Eventing.IEventListenerOptions)">
            <summary>
            <inheritdoc cref="M:OpenMod.API.Eventing.IEventBus.Subscribe(OpenMod.API.IOpenModComponent,System.String,OpenMod.API.Eventing.EventCallback)" />
            </summary>
            <param name="component">The component.</param>
            <param name="eventType">The event to subscribe to.</param>
            <param name="callback">The action to execute after all listeners were notified.</param>
            <param name="options">The extended options for this event subscription.</param>
            <returns>A disposable that unsubscribes the callback when disposed.</returns>
        </member>
        <member name="M:OpenMod.API.Eventing.IEventBus.Subscribe(OpenMod.API.IOpenModComponent,System.Reflection.Assembly)">
            <summary>
            Finds and registers all <see cref="T:OpenMod.API.Eventing.IEventListener"/>s.
            </summary>
            <param name="component">The component registering the event listeners.</param>
            <param name="assembly">The assembly to search for event listeners in.</param>
            <returns>A disposable that unsubscribes the event listeners when disposed.</returns>
        </member>
        <member name="M:OpenMod.API.Eventing.IEventBus.Unsubscribe(OpenMod.API.IOpenModComponent)">
            <summary>
            Unsubscribes a component from all events.
            </summary>
            <param name="component">The component owning the event listeners.</param>
        </member>
        <member name="M:OpenMod.API.Eventing.IEventBus.Unsubscribe(OpenMod.API.IOpenModComponent,System.String)">
            <summary>
            Unsubscribes a component from an event.
            </summary>
            <param name="component">The component unsubscribing.</param>
            <param name="eventName">The event to unsubscribe from.</param>
        </member>
        <member name="M:OpenMod.API.Eventing.IEventBus.Unsubscribe``1(OpenMod.API.IOpenModComponent)">
            <summary>
            Unsubscribes a component from an event.
            </summary>
            <param name="component">The component unsubscribing.</param>
            <typeparam name="TEvent">The event to unsubscribe from.</typeparam>
        </member>
        <member name="M:OpenMod.API.Eventing.IEventBus.Unsubscribe(OpenMod.API.IOpenModComponent,System.Type)">
            <summary>
            Unsubscribe a component from an event.
            </summary>
            <param name="component">The component unsubscribing.</param>
            <param name="eventType">The event to unsubscribe from.</param>
        </member>
        <member name="M:OpenMod.API.Eventing.IEventBus.EmitAsync(OpenMod.API.IOpenModComponent,System.Object,OpenMod.API.Eventing.IEvent,OpenMod.API.Eventing.EventExecutedCallback)">
            <summary>
            Emits an event.
            </summary>
            <param name="component">The component emitting the event.</param>
            <param name="sender">The object emitting the event.</param>
            <param name="event">The event object.</param>
            <param name="callback">The optional event callback. See <see cref="T:OpenMod.API.Eventing.EventExecutedCallback" />.</param>
        </member>
        <member name="T:OpenMod.API.Eventing.IEventListener">
            <summary>
            Listens for an events.
            </summary>
        </member>
        <member name="T:OpenMod.API.Eventing.IEventListener`1">
            <summary>
                <inheritdoc />
            </summary>
            <typeparam name="TEvent">The event to listen to.</typeparam>
        </member>
        <member name="M:OpenMod.API.Eventing.IEventListener`1.HandleEventAsync(System.Object,`0)">
            <summary>
            Called when the event has been emitted.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="event">The event object.</param>
        </member>
        <member name="T:OpenMod.API.IHostInformation">
            <summary>
            Provides information about the OpenMod host.
            </summary>
        </member>
        <member name="P:OpenMod.API.IHostInformation.HostVersion">
            <summary>
            Gets the version of the OpenMod host implementation.
            </summary>
        </member>
        <member name="P:OpenMod.API.IHostInformation.HostName">
            <summary>
            Gets the name of the host implementation.
            </summary>
            <example>
            OpenMod for Unturned
            </example>
        </member>
        <member name="T:OpenMod.API.Ioc.IConfigurationConfigurator">
            <summary>
            Configurator for the OpenMod configuration.
            </summary>
        </member>
        <member name="M:OpenMod.API.Ioc.IConfigurationConfigurator.ConfigureConfiguration(OpenMod.API.Ioc.IOpenModServiceConfigurationContext,Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            Called when the OpenMod configuration gets built.
            </summary>
        </member>
        <member name="T:OpenMod.API.Ioc.IContainerConfigurator">
            <summary>
            Configurator for the OpenMod IoC container.
            </summary>
        </member>
        <member name="M:OpenMod.API.Ioc.IContainerConfigurator.ConfigureContainer(OpenMod.API.Ioc.IOpenModServiceConfigurationContext,Autofac.ContainerBuilder)">
            <summary>
            Called when the OpenMod root IoC container gets built.
            </summary>
            <param name="openModStartupContext">The startup context.</param>
            <param name="containerBuilder">The container builder.</param>
        </member>
        <member name="T:OpenMod.API.Ioc.IOpenModServiceConfigurationContext">
            <summary>
            The context used when the OpenMod container or configuration gets built.
            </summary>
        </member>
        <member name="P:OpenMod.API.Ioc.IOpenModServiceConfigurationContext.Runtime">
            <summary>
            The OpenMod runtime
            </summary>
        </member>
        <member name="P:OpenMod.API.Ioc.IOpenModServiceConfigurationContext.Configuration">
            <summary>
            The current OpenMod configuration.
            </summary>
        </member>
        <member name="P:OpenMod.API.Ioc.IOpenModServiceConfigurationContext.OpenModStartup">
            <summary>
            The OpenMod startup utility instance.
            </summary>
        </member>
        <member name="P:OpenMod.API.Ioc.IOpenModServiceConfigurationContext.DataStore">
            <summary>
            Data store for startup.
            </summary>
        </member>
        <member name="P:OpenMod.API.Ioc.IOpenModServiceConfigurationContext.LoggerFactory">
            <summary>
            The logger factory.
            </summary>
        </member>
        <member name="T:OpenMod.API.Ioc.IOpenModStartup">
            <summary>
            Utility class for common functions used during OpenMod startup.
            </summary>
        </member>
        <member name="P:OpenMod.API.Ioc.IOpenModStartup.Context">
            <summary>
            The service configuration context.
            </summary>
        </member>
        <member name="M:OpenMod.API.Ioc.IOpenModStartup.RegisterIocAssemblyAndCopyResources(System.Reflection.Assembly,System.String)">
            <summary>
            Registers services using the <c>[Service]</c> and <c>[ServiceImplementation]</c> attributes from the given assembly.
            Also copies the embedded resources to the given assembly directory.
            </summary>
            <param name="assembly">The assembly to register the services from.</param>
            <param name="assemblyDir">The directory the embedded resources get copied to.</param>
        </member>
        <member name="M:OpenMod.API.Ioc.IOpenModStartup.RegisterPluginAssembliesAsync(OpenMod.API.Plugins.IPluginAssembliesSource)">
            <summary>
            Registers plugin assemblies.
            </summary>
            <param name="source">The plugin assemblies source.</param>
            <returns>The loaded plugin assemblies.</returns>
        </member>
        <member name="T:OpenMod.API.Ioc.IServiceConfigurator">
            <summary>
            Configurator for the OpenMod IoC container.
            </summary>
        </member>
        <member name="M:OpenMod.API.Ioc.IServiceConfigurator.ConfigureServices(OpenMod.API.Ioc.IOpenModServiceConfigurationContext,Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Called when the OpenMod root IoC container gets built.
            </summary>
            <param name="openModStartupContext">The startup context.</param>
            <param name="serviceCollection">The service collection.</param>
        </member>
        <member name="T:OpenMod.API.Ioc.PluginServiceImplementationAttribute">
            <summary>
            Declares a service implementation for automatic plugin scope IoC registratrion.
            Service implementations using this attribute are automatically registered for any interface that implements the <see cref="T:OpenMod.API.Ioc.ServiceAttribute"/>.
            </summary>
            <seealso cref="T:OpenMod.API.Ioc.ServiceAttribute"/>
            <seealso cref="T:OpenMod.API.Ioc.ServiceImplementationAttribute"/>
        </member>
        <member name="T:OpenMod.API.Ioc.ServiceAttribute">
            <summary>
            Declares the interfaces as a service for automatic IoC registration.
            <seealso cref="T:OpenMod.API.Ioc.ServiceImplementationAttribute"/>
            <seealso cref="T:OpenMod.API.Ioc.PluginServiceImplementationAttribute"/>
            </summary>
        </member>
        <member name="T:OpenMod.API.Ioc.ServiceImplementationAttribute">
            <summary>
            Declares a service implementation for automatic global IoC registratrion.
            Service implementations using this attribute are automatically registered for any interface that implements the <see cref="T:OpenMod.API.Ioc.ServiceAttribute"/>.
            <seealso cref="T:OpenMod.API.Ioc.ServiceAttribute"/>
            <seealso cref="T:OpenMod.API.Ioc.PluginServiceImplementationAttribute"/>
            </summary>
        </member>
        <member name="T:OpenMod.API.IOpenModComponent">
            <summary>
            Defines an OpenMod component. Components are either plugins or OpenMod assemblies.
            </summary>
        </member>
        <member name="P:OpenMod.API.IOpenModComponent.OpenModComponentId">
            <summary>
            Gets the component ID.
            </summary>
        </member>
        <member name="P:OpenMod.API.IOpenModComponent.WorkingDirectory">
            <summary>
            Gets the working directory.
            </summary>
        </member>
        <member name="P:OpenMod.API.IOpenModComponent.IsComponentAlive">
            <summary>
            Checks if the component is alive. The component must not be able to execute any actions if this returns false.
            </summary>
        </member>
        <member name="P:OpenMod.API.IOpenModComponent.LifetimeScope">
            <summary>
            Gets the components lifetime scope.
            </summary>
        </member>
        <member name="P:OpenMod.API.IOpenModComponent.DataStore">
            <summary>
            Gets the optional data store of the component.
            </summary>
        </member>
        <member name="T:OpenMod.API.IOpenModHost">
            <summary>
            Represents a game or anything else that hosts OpenMod.
            </summary>
        </member>
        <member name="M:OpenMod.API.IOpenModHost.InitAsync">
            <summary>
            Initializes the host.
            </summary>
        </member>
        <member name="M:OpenMod.API.IOpenModHost.ShutdownAsync">
            <summary>
            Shuts the host down gracefully.
            </summary>
        </member>
        <member name="M:OpenMod.API.IOpenModHost.HasCapability(System.String)">
            <summary>
            Checks if the host has a capability.
            </summary>
        </member>
        <member name="M:OpenMod.API.IOpenModHost.PerformHardReloadAsync">
            <summary>
            Hard reloads OpenMod binaries from disk. Used upgrading OpenMod without restarting.
            </summary>
        </member>
        <member name="T:OpenMod.API.IRuntime">
            <summary>
            The OpenMod runtime is responsible for initializing OpenMod.
            </summary>
        </member>
        <member name="P:OpenMod.API.IRuntime.IsDisposing">
            <summary>
            Checks if the runtime is shutting down or disposing.
            </summary>
        </member>
        <member name="M:OpenMod.API.IRuntime.InitAsync(System.Collections.Generic.List{System.Reflection.Assembly},OpenMod.API.RuntimeInitParameters,System.Func{Microsoft.Extensions.Hosting.IHostBuilder})">
            <summary>
            Initializes the runtime.
            </summary>
            <returns>The .NET Generic Host interface.</returns>
        </member>
        <member name="M:OpenMod.API.IRuntime.ShutdownAsync">
            <summary>
            Shuts OpenMod down gracefully and disposes all services.
            </summary>
        </member>
        <member name="P:OpenMod.API.IRuntime.Version">
            <summary>
            Gets the OpenMod runtime version.
            </summary>
        </member>
        <member name="P:OpenMod.API.IRuntime.CommandlineArgs">
            <summary>
            Gets the commandline arguments.
            </summary>
        </member>
        <member name="P:OpenMod.API.IRuntime.Status">
            <summary>
            Gets the runtime status. 
            </summary>
        </member>
        <member name="M:OpenMod.API.IRuntime.PerformSoftReloadAsync">
            <summary>
            Rebuilds the DI container and reloads all plugins, services, configurations etc.
            </summary>
        </member>
        <member name="P:OpenMod.API.IRuntime.Host">
            <summary>
            Gets the .NET generic host instance. Returns null if the host is not loaded yet.
            </summary>
        </member>
        <member name="P:OpenMod.API.IRuntime.HostInformation">
            <summary>
            Information about the OpenMod host. Returns null if the host is not loaded yet.
            </summary>
        </member>
        <member name="P:OpenMod.API.IRuntime.HostAssemblies">
            <summary>
            Gets the OpenMod host assemblies.
            </summary>
        </member>
        <member name="T:OpenMod.API.Jobs.IJobScheduler">
            <summary>
            Runs jobs from autoexec.yaml.
            </summary>
        </member>
        <member name="M:OpenMod.API.Jobs.IJobScheduler.StartAsync">
            <summary>
            Notifies the job scheduler that the server has loaded.<br/>
            </summary>
            <remarks>
            <b>This method is for internal usage only and should not be called by plugins.</b>
            </remarks>
        </member>
        <member name="M:OpenMod.API.Jobs.IJobScheduler.ScheduleJobAsync(OpenMod.API.Jobs.JobCreationParameters)">
            <summary>
            Schedules a new job.
            </summary>
            <param name="parameters">The parameters for the job creation.</param>
        </member>
        <member name="M:OpenMod.API.Jobs.IJobScheduler.FindJobAsync(System.String)">
            <summary>
            Finds a job based on its name.
            </summary>
            <returns><b>The scheduled job</b> if found; otherwise, <b>null.</b></returns>
        </member>
        <member name="M:OpenMod.API.Jobs.IJobScheduler.RemoveJobAsync(System.String)">
            <summary>
            Removes a scheduled job. Will unschedule the job and prevent further execution.
            </summary>
            <returns><b>True</b> if the job was found and removed; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OpenMod.API.Jobs.IJobScheduler.RemoveJobAsync(OpenMod.API.Jobs.ScheduledJob)">
            <inheritdoc cref="M:OpenMod.API.Jobs.IJobScheduler.RemoveJobAsync(System.String)"/>
        </member>
        <member name="M:OpenMod.API.Jobs.IJobScheduler.GetScheduledJobsAsync(System.Boolean)">
            <summary>
            Gets all scheduled jobs.
            </summary>
            <param name="includeDisabled">Sets if disabled jobs should be included.</param>
            <returns><b>All jobs</b> if <c>includeDisabled</c> is set to true; otherwise, <b>only enabled jobs.</b></returns>
        </member>
        <member name="T:OpenMod.API.Jobs.ITaskExecutor">
            <summary>
            Executes a task.
            </summary>
        </member>
        <member name="M:OpenMod.API.Jobs.ITaskExecutor.SupportsType(System.String)">
            <summary>
            Checks if the task executor can execute the given task type.
            </summary>
            <param name="taskType">The task type to check</param>
            <returns></returns>
        </member>
        <member name="M:OpenMod.API.Jobs.ITaskExecutor.ExecuteAsync(OpenMod.API.Jobs.JobTask)">
            <summary>
            Executes the given task.
            </summary>
            <param name="task">The task to execute.</param>
        </member>
        <member name="T:OpenMod.API.Jobs.JobCreationParameters">
            <summary>
            Parameters used for scheduling jobs.
            </summary>
        </member>
        <member name="P:OpenMod.API.Jobs.JobCreationParameters.Name">
            <summary>
            Gets the unique name of the job.
            </summary>
        </member>
        <member name="P:OpenMod.API.Jobs.JobCreationParameters.Args">
            <summary>
            Gets the job arguments.
            </summary>
        </member>
        <member name="P:OpenMod.API.Jobs.JobCreationParameters.Task">
            <summary>
            Gets the task type of the job. Requires a <see cref="T:OpenMod.API.Jobs.ITaskExecutor"/> that can execute the given type.
            </summary>
        </member>
        <member name="P:OpenMod.API.Jobs.JobCreationParameters.Schedule">
            <summary>
            Gets the schedule expression.
            </summary>
        </member>
        <member name="T:OpenMod.API.Jobs.JobTask">
            <summary>
            Represents a task instance for a job.
            </summary>
        </member>
        <member name="P:OpenMod.API.Jobs.JobTask.JobName">
            <summary>
            Gets the name of the job.
            </summary>
        </member>
        <member name="P:OpenMod.API.Jobs.JobTask.Args">
            <summary>
            Gets the task arguments.
            </summary>
        </member>
        <member name="P:OpenMod.API.Jobs.JobTask.Task">
            <summary>
            Gets the task type.
            </summary>
        </member>
        <member name="T:OpenMod.API.Jobs.ScheduledJob">
            <summary>
            Represents a job.
            </summary>
        </member>
        <member name="P:OpenMod.API.Jobs.ScheduledJob.Name">
            <summary>
            Gets the unique name of the job.
            </summary>
        </member>
        <member name="P:OpenMod.API.Jobs.ScheduledJob.Args">
            <summary>
            Gets the job arguments.
            </summary>
        </member>
        <member name="P:OpenMod.API.Jobs.ScheduledJob.Task">
            <summary>
            Gets the task type of the job.
            </summary>
        </member>
        <member name="P:OpenMod.API.Jobs.ScheduledJob.Schedule">
            <summary>
            Gets the schedule expression.
            </summary>
        </member>
        <member name="P:OpenMod.API.Jobs.ScheduledJob.Enabled">
            <summary>
            Checks if the job is enabled.
            </summary>
        </member>
        <member name="T:OpenMod.API.Localization.IOpenModHostStringLocalizer">
            <summary>
            The service used for localizing the OpenMod host's messages.
            </summary>
            <remarks>
            This service is not used for localizing plugin messages.
            </remarks>
        </member>
        <member name="T:OpenMod.API.Localization.IOpenModStringLocalizer">
            <summary>
            The service used for localizing OpenMod messages.
            </summary>
            <remarks>
            This service is not used for localizing plugin messages.
            </remarks>
        </member>
        <member name="T:OpenMod.API.Permissions.IPermissionActor">
            <summary>
            Represents an actor that can be checked for permissions.
            </summary>
        </member>
        <member name="P:OpenMod.API.Permissions.IPermissionActor.Id">
            <summary>
            Gets the unique to the actor type and persistent ID of the actor.
            </summary>
        </member>
        <member name="P:OpenMod.API.Permissions.IPermissionActor.Type">
            <summary>
            Gets the type of the actor.
            </summary>
        </member>
        <member name="P:OpenMod.API.Permissions.IPermissionActor.DisplayName">
            <summary>
            Gets the human readable name of the actor.
            </summary>
        </member>
        <member name="P:OpenMod.API.Permissions.IPermissionActor.FullActorName">
            <summary>
            Gets the full actor name including display name and ID
            </summary>
        </member>
        <member name="T:OpenMod.API.Permissions.IPermissionChecker">
            <summary>
            The service used to checking permission authorizations.
            </summary>
        </member>
        <member name="P:OpenMod.API.Permissions.IPermissionChecker.PermissionCheckProviders">
            <summary>
            Gets the permission check providers.
            </summary>
        </member>
        <member name="P:OpenMod.API.Permissions.IPermissionChecker.PermissionStores">
            <summary>
            Gets the permission sources.
            </summary>
        </member>
        <member name="M:OpenMod.API.Permissions.IPermissionChecker.CheckPermissionAsync(OpenMod.API.Permissions.IPermissionActor,System.String)">
            <summary>
            Checks if an actor has authorization to execute an action.
            </summary>
            <param name="actor">The actor to check.</param>
            <param name="permission">The permission to check.</param>
            <returns>See <see cref="T:OpenMod.API.Permissions.PermissionGrantResult"/>.</returns>
        </member>
        <member name="M:OpenMod.API.Permissions.IPermissionChecker.InitAsync">
            <summary>
            Initializes the permission checker.
            </summary>
            <remarks>
            <b>This method is for internal usage only and should not be called by plugins.</b>
            </remarks>
        </member>
        <member name="T:OpenMod.API.Permissions.IPermissionCheckProvider">
            <summary>
            Providers used for checking permissions.
            </summary>
        </member>
        <member name="M:OpenMod.API.Permissions.IPermissionCheckProvider.SupportsActor(OpenMod.API.Permissions.IPermissionActor)">
            <summary>
            Defines if the given actor is supported by this provider.
            </summary>
            <param name="actor">The actor to check.</param>
            <returns><b>true</b> if the given actor is supported; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OpenMod.API.Permissions.IPermissionCheckProvider.CheckPermissionAsync(OpenMod.API.Permissions.IPermissionActor,System.String)">
            <summary>
            Checks if an actor has authorization to execute an action.
            </summary>
            <param name="actor">The actor to check.</param>
            <param name="permission">The permission to check.</param>
            <returns>
                <see cref="F:OpenMod.API.Permissions.PermissionGrantResult.Grant" /> if the actor explicitly has the permission,
                <see cref="F:OpenMod.API.Permissions.PermissionGrantResult.Deny" /> if the actor explicitly does not have the permission; otherwise,
                <see cref="F:OpenMod.API.Permissions.PermissionGrantResult.Default" />
            </returns>
        </member>
        <member name="T:OpenMod.API.Permissions.IPermissionRegistration">
            <summary>
            Represents a registered permission.
            </summary>
        </member>
        <member name="P:OpenMod.API.Permissions.IPermissionRegistration.Owner">
            <summary>
            Gets the owner component.
            </summary>
        </member>
        <member name="P:OpenMod.API.Permissions.IPermissionRegistration.Permission">
            <summary>
            Gets the permission.
            </summary>
        </member>
        <member name="P:OpenMod.API.Permissions.IPermissionRegistration.Description">
            <summary>
            Gets the permission description.
            </summary>
        </member>
        <member name="P:OpenMod.API.Permissions.IPermissionRegistration.DefaultGrant">
            <summary>
            Gets the default grant result if the permission not explicitly granted or denied.
            </summary>
        </member>
        <member name="T:OpenMod.API.Permissions.IPermissionRegistry">
            <summary>
            The service used for registering and looking up permissions.
            </summary>
        </member>
        <member name="M:OpenMod.API.Permissions.IPermissionRegistry.RegisterPermission(OpenMod.API.IOpenModComponent,System.String,System.String,System.Nullable{OpenMod.API.Permissions.PermissionGrantResult})">
            <summary>
            Registers a permission.
            </summary>
            <param name="component">The component registering the permission.</param>
            <param name="permission">The permission.</param>
            <param name="description">The optional description.</param>
            <param name="defaultGrant">The optional default grant. Will default to <see cref="F:OpenMod.API.Permissions.PermissionGrantResult.Default"/>. See <see cref="P:OpenMod.API.Permissions.IPermissionRegistration.DefaultGrant"/>.</param>
        </member>
        <member name="M:OpenMod.API.Permissions.IPermissionRegistry.GetPermissions(OpenMod.API.IOpenModComponent)">
            <summary>
            Gets the registered permissions for the given component.
            </summary>
            <param name="component">The component to get the permissions of.</param>
            <returns>The registered permissions of the given component.</returns>
        </member>
        <member name="M:OpenMod.API.Permissions.IPermissionRegistry.FindPermission(System.String)">
            <summary>
            Searches for a permission registration.
            </summary>
            <param name="permission">The permission to search for.</param>
            <returns><b>The registered permission</b> if founds; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:OpenMod.API.Permissions.IPermissionRegistry.FindPermission(OpenMod.API.IOpenModComponent,System.String)">
            <summary>
            Searches for a permission registration.
            </summary>
            <param name="component">The component that has registered the permission.</param>
            <param name="permission">The permission to search for.</param>
            <returns><b>The registered permission</b> if founds; otherwise, <b>null</b>.</returns>
        </member>
        <member name="T:OpenMod.API.Permissions.IPermissionRole">
            <summary>
            Represents a permission role.
            </summary>
        </member>
        <member name="P:OpenMod.API.Permissions.IPermissionRole.Priority">
            <summary>
            Gets or sets the priority of this role.
            </summary>
        </member>
        <member name="P:OpenMod.API.Permissions.IPermissionRole.Parents">
            <summary>
            Gets or sets the parents of the role.
            </summary>
        </member>
        <member name="P:OpenMod.API.Permissions.IPermissionRole.IsAutoAssigned">
            <summary>
            Defines if the role should be automatically assigned to new users.
            </summary>
        </member>
        <member name="T:OpenMod.API.Permissions.IPermissionRoleStore">
            <summary>
            The service used for storing permission roles.
            </summary>
        </member>
        <member name="M:OpenMod.API.Permissions.IPermissionRoleStore.GetRolesAsync(OpenMod.API.Permissions.IPermissionActor,System.Boolean)">
            <summary>
            Gets all roles inherited by the actor.
            </summary>
            <param name="actor">The actor.</param>
            <param name="inherit">Defines if the parent roles permissions should be included.</param>
            <returns>the inherited roles of the actor.</returns>
        </member>
        <member name="M:OpenMod.API.Permissions.IPermissionRoleStore.GetRolesAsync">
            <summary>
            Gets all permission roles.
            </summary>
            <returns>all permission roles.</returns>
        </member>
        <member name="M:OpenMod.API.Permissions.IPermissionRoleStore.GetRoleAsync(System.String)">
            <summary>
            Gets a permission role.
            </summary>
            <returns>the permission role if found; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:OpenMod.API.Permissions.IPermissionRoleStore.UpdateRoleAsync(OpenMod.API.Permissions.IPermissionRole)">
            <summary>
            Updates a role.
            </summary>
            <param name="role">The role to update.</param>
            <returns><b>true</b> if the role exists and could be updated; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OpenMod.API.Permissions.IPermissionRoleStore.AddRoleToActorAsync(OpenMod.API.Permissions.IPermissionActor,System.String)">
            <summary>
            Adds a role to a user.
            </summary>
            <param name="actor">The actor to add the role to.</param>
            <param name="roleId">The roleId to add.</param>
            <returns><b>true</b> if the role was successfully added or already exists; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OpenMod.API.Permissions.IPermissionRoleStore.RemoveRoleFromActorAsync(OpenMod.API.Permissions.IPermissionActor,System.String)">
            <summary>
            Removes a role from a user.
            </summary>
            <param name="actor">The actor to add the role to.</param>
            <param name="roleId">The roleId to remove.</param>
            <returns><b>true</b> if the role was successfully removed or doesn't exist; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OpenMod.API.Permissions.IPermissionRoleStore.CreateRoleAsync(OpenMod.API.Permissions.IPermissionRole)">
            <summary>
            Creates a new permission role.
            </summary>
            <param name="role">The role to create.</param>
            <returns><b>true</b> if the role was successfully created; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OpenMod.API.Permissions.IPermissionRoleStore.DeleteRoleAsync(System.String)">
            <summary>
            Deletes a permission role.
            </summary>
            <param name="roleId">The roleId to delete.</param>
            <returns><b>true</b> if the role was successfully deleted or doesn't exist; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OpenMod.API.Permissions.IPermissionRoleStore.GetAutoAssignedRolesAsync(System.String,System.String)">
            <summary>
            Gets the roles that will be auto assigned for the actor.
            </summary>
        </member>
        <member name="M:OpenMod.API.Permissions.IPermissionRoleStore.SavePersistentDataAsync``1(System.String,System.String,``0)">
            <summary>
            Saves persistent data. T must be serializable.
            </summary>
        </member>
        <member name="M:OpenMod.API.Permissions.IPermissionRoleStore.GetPersistentDataAsync``1(System.String,System.String)">
            <summary>
            Gets persistent data. T must be serializable.
            </summary>
        </member>
        <member name="T:OpenMod.API.Permissions.IPermissionStore">
            <summary>
            Provider for storing permissions.
            </summary>
        </member>
        <member name="M:OpenMod.API.Permissions.IPermissionStore.GetGrantedPermissionsAsync(OpenMod.API.Permissions.IPermissionActor,System.Boolean)">
            <summary>
            Gets the permissions of the given actor.
            </summary>
            <param name="actor">The actor to get permissions from.</param>
            <param name="inherit">Defines if the parent roles permissions should be included.</param>
            <returns>A list of all permissions of the actor.</returns>
        </member>
        <member name="M:OpenMod.API.Permissions.IPermissionStore.GetDeniedPermissionsAsync(OpenMod.API.Permissions.IPermissionActor,System.Boolean)">
            <summary>
            Gets the denied permissions of the given actor.
            </summary>
            <param name="actor">The actor to get denied permissions from.</param>
            <param name="inherit">Defines if the parent roles denied permissions should be included.</param>
            <returns>A list of all denied permissions of the actor.</returns>
        </member>
        <member name="M:OpenMod.API.Permissions.IPermissionStore.AddGrantedPermissionAsync(OpenMod.API.Permissions.IPermissionActor,System.String)">
            <summary>
            Adds an explicitly granted permission to the actor.
            </summary>
            <param name="actor">The actor.</param>
            <param name="permission">The permission to add.</param>
            <returns><b>true</b> if the permission was successfully added or exists already; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OpenMod.API.Permissions.IPermissionStore.AddDeniedPermissionAsync(OpenMod.API.Permissions.IPermissionActor,System.String)">
            <summary>
            Adds an explicitly denied permission to the actor.
            </summary>
            <param name="actor">The actor.</param>
            <param name="permission">The denied permission to add.</param>
            <returns><b>true</b> if the permission was successfully added or exists already; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OpenMod.API.Permissions.IPermissionStore.RemoveGrantedPermissionAsync(OpenMod.API.Permissions.IPermissionActor,System.String)">
            <summary>
            Removes an explicitly granted permission from the actor.
            </summary>
            <param name="actor">The actor.</param>
            <param name="permission">The permission to remove.</param>
            <returns><b>true</b> if the permission was successfully removed or doesn't exist; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OpenMod.API.Permissions.IPermissionStore.RemoveDeniedPermissionAsync(OpenMod.API.Permissions.IPermissionActor,System.String)">
            <summary>
            Removes an explicitly denied permission from the actor.
            </summary>
            <param name="actor">The actor.</param>
            <param name="permission">The permission to remove.</param>
            <returns><b>true</b> if the permission was successfully removed or doesn't exist; otherwise, <b>false</b>.</returns>
        </member>
        <member name="T:OpenMod.API.Permissions.PermissionGrantResult">
            <summary>
            Defines permission check results.
            </summary>
        </member>
        <member name="F:OpenMod.API.Permissions.PermissionGrantResult.Default">
            <summary>
            The permission was not explicitly granted or denied. Default action (which is usually the same as deny) should be performed.
            </summary>
        </member>
        <member name="F:OpenMod.API.Permissions.PermissionGrantResult.Grant">
            <summary>
            The permission was explicitly granted.
            </summary>
        </member>
        <member name="F:OpenMod.API.Permissions.PermissionGrantResult.Deny">
            <summary>
            The permission was explicitly denied.
            </summary>
        </member>
        <member name="T:OpenMod.API.Persistence.DataStoreCreationParameters">
            <summary>
            Parameters for creating a new data store.
            </summary>
        </member>
        <member name="P:OpenMod.API.Persistence.DataStoreCreationParameters.ComponentId">
            <summary>
            Gets or sets the owning component id. Must not be null if <see cref="P:OpenMod.API.Persistence.DataStoreCreationParameters.Component"/> is not set.
            </summary>
            <remarks>
            <b>Obsolete:</b> Use <see cref="P:OpenMod.API.Persistence.DataStoreCreationParameters.Component"/> instead.
            </remarks>
        </member>
        <member name="P:OpenMod.API.Persistence.DataStoreCreationParameters.Component">
            <summary>
            Gets or sets the owning component. Must not be null if <see cref="P:OpenMod.API.Persistence.DataStoreCreationParameters.ComponentId"/> is not set.
            </summary>
        </member>
        <member name="P:OpenMod.API.Persistence.DataStoreCreationParameters.WorkingDirectory">
            <summary>
            Gets or sets the working directory.
            </summary>
        </member>
        <member name="P:OpenMod.API.Persistence.DataStoreCreationParameters.Prefix">
            <summary>
            Gets or sets the prefix.
            </summary>
        </member>
        <member name="P:OpenMod.API.Persistence.DataStoreCreationParameters.Suffix">
            <summary>
            Gets or sets the suffix.
            </summary>
        </member>
        <member name="P:OpenMod.API.Persistence.DataStoreCreationParameters.LogOnChange">
            <summary>
            Defines if detected file changes should be logged.
            </summary>
        </member>
        <member name="T:OpenMod.API.Persistence.IDataStore">
            <summary>
            Provides persistent storage.
            </summary>
        </member>
        <member name="M:OpenMod.API.Persistence.IDataStore.SaveAsync``1(System.String,``0)">
            <summary>
            Saves data with given key.
            </summary>
            <param name="key">The key to store to.</param>
            <param name="data">The data to store to.</param>
        </member>
        <member name="M:OpenMod.API.Persistence.IDataStore.ExistsAsync(System.String)">
            <summary>
            Checks if the give key exists.
            </summary>
            <param name="key">The key to check.</param>
        </member>
        <member name="M:OpenMod.API.Persistence.IDataStore.LoadAsync``1(System.String)">
            <summary>
            Loads data from the given key.
            </summary>
            <param name="key">The key to load from.</param>
        </member>
        <member name="M:OpenMod.API.Persistence.IDataStore.AddChangeWatcher(System.String,OpenMod.API.IOpenModComponent,System.Action)">
            <summary>
            Adds a change watcher if the data has changed externally. Does not trigger for calls to <see cref="M:OpenMod.API.Persistence.IDataStore.SaveAsync``1(System.String,``0)"/>.
            </summary>
            <param name="key">The key to listen to.</param>
            <param name="component">The component registering the change watcher.</param>
            <param name="onChange">The on change callback.</param>
            <returns>An <see cref="T:System.IDisposable"/> that will unregister the change watcher on disposal.</returns>
        </member>
        <member name="T:OpenMod.API.Persistence.IDataStoreFactory">
            <summary>
            The service used to create data stores.
            <seealso cref="T:OpenMod.API.Persistence.IDataStore"/>.
            </summary>
        </member>
        <member name="M:OpenMod.API.Persistence.IDataStoreFactory.CreateDataStore(OpenMod.API.Persistence.DataStoreCreationParameters)">
            <summary>
            Creates a new datastore.
            </summary>
            <param name="parameters">The data store creation parameters</param>
            <returns>The created data store.</returns>
        </member>
        <member name="T:OpenMod.API.Persistence.IOpenModDataStoreAccessor">
            <summary>
            The service used to access OpenMod's datastore.
            </summary>
            <remarks>
            This service cannot be used to access plugin datastores. Use <see cref="P:OpenMod.API.IOpenModComponent.DataStore"/> instead.
            </remarks>
        </member>
        <member name="P:OpenMod.API.Persistence.IOpenModDataStoreAccessor.DataStore">
            <summary>
            Gets OpenMod's own datastore.
            </summary>
        </member>
        <member name="T:OpenMod.API.Plugins.IOpenModPlugin">
            <summary>
            Represents an OpenMod plugin.
            </summary>
        </member>
        <member name="P:OpenMod.API.Plugins.IOpenModPlugin.DisplayName">
            <summary>
            Gets the human readable name of the plugin.
            </summary>
        </member>
        <member name="P:OpenMod.API.Plugins.IOpenModPlugin.Author">
            <summary>
            Gets the plugin author.
            </summary>
        </member>
        <member name="P:OpenMod.API.Plugins.IOpenModPlugin.Website">
            <summary>
            Gets the plugin website.
            </summary>
        </member>
        <member name="P:OpenMod.API.Plugins.IOpenModPlugin.Description">
            <summary>
            Gets the plugin description
            </summary>
        </member>
        <member name="P:OpenMod.API.Plugins.IOpenModPlugin.Version">
            <summary>
            Gets the plugin version.
            </summary>
        </member>
        <member name="M:OpenMod.API.Plugins.IOpenModPlugin.LoadAsync">
            <summary>
            Loads the plugin.
            </summary>
            <remarks>
            <b>This method is for internal usage only and should not be used by plugins.</b>
            </remarks>
        </member>
        <member name="M:OpenMod.API.Plugins.IOpenModPlugin.UnloadAsync">
            <summary>
            Unloads the plugin.
            </summary>
            <remarks>
            <b>This method is for internal usage only and should not be used by plugins.</b>
            </remarks>
        </member>
        <member name="T:OpenMod.API.Plugins.IPluginAccessor`1">
            <summary>
            Service used for resolving plugin instances. Must be lazy accessed on global scope services. 
            </summary>
            <typeparam name="TPlugin">The plugin to resolve.</typeparam>
        </member>
        <member name="P:OpenMod.API.Plugins.IPluginAccessor`1.Instance">
            <summary>
            Gets the plugin instance. Returns null if the plugin is not loaded or found.
            </summary>
        </member>
        <member name="T:OpenMod.API.Plugins.IPluginActivator">
            <summary>
            Service used for activating plugins.
            </summary>
        </member>
        <member name="P:OpenMod.API.Plugins.IPluginActivator.ActivatedPlugins">
            <summary>
            Gets the activated plugins.
            </summary>
        </member>
        <member name="M:OpenMod.API.Plugins.IPluginActivator.TryActivatePluginAsync(System.Reflection.Assembly)">
            <summary>
            Tries to activate a plugin.
            </summary>
            <param name="assembly">The plugin assembly.</param>
            <returns><b>The plugin instance</b> if activation was successful; otherwise, <b>null</b>.</returns>
        </member>
        <member name="T:OpenMod.API.Plugins.IPluginAssembliesSource">
            <summary>
            Provider for plugin assemblies.
            </summary>
        </member>
        <member name="M:OpenMod.API.Plugins.IPluginAssembliesSource.LoadPluginAssembliesAsync">
            <summary>
            Loads plugin assemblies.
            </summary>
            <returns>The loaded plugin assemblies.</returns>
        </member>
        <member name="T:OpenMod.API.Plugins.IPluginAssemblyStore">
            <summary>
            The plugin assembly store used during OpenMod startup.
            </summary>
            <remarks>
            <b>This is an interface is for internal usage only and should not be used by plugins.</b>
            </remarks>
        </member>
        <member name="M:OpenMod.API.Plugins.IPluginAssemblyStore.LoadPluginAssembliesAsync(OpenMod.API.Plugins.IPluginAssembliesSource)">
            <summary>
            Loads plugin assemblies from the given assembly source.
            </summary>
            <param name="source">The assemblies source.</param>
            <returns>The loaded plugin assemblies.</returns>
        </member>
        <member name="P:OpenMod.API.Plugins.IPluginAssemblyStore.LoadedPluginAssemblies">
            <summary>
            Gets the loaded plugin assemblies.
            </summary>
        </member>
        <member name="T:OpenMod.API.Plugins.IPluginContainerConfigurator">
            <summary>
            Configurator for plugin containers.
            </summary>
        </member>
        <member name="M:OpenMod.API.Plugins.IPluginContainerConfigurator.ConfigureContainer(OpenMod.API.Plugins.IPluginServiceConfigurationContext)">
            <summary>
            Called when a plugins container gets configured.
            </summary>
            <param name="context">The configuration context.</param>
        </member>
        <member name="T:OpenMod.API.Plugins.IPluginServiceConfigurationContext">
            <summary>
            Context used on plugin container configuration.
            </summary>
        </member>
        <member name="P:OpenMod.API.Plugins.IPluginServiceConfigurationContext.ParentLifetimeScope">
            <summary>
            Gets the parent lifetime scope.
            </summary>
        </member>
        <member name="P:OpenMod.API.Plugins.IPluginServiceConfigurationContext.Configuration">
            <summary>
            Gets the plugin configuration.
            </summary>
        </member>
        <member name="P:OpenMod.API.Plugins.IPluginServiceConfigurationContext.ContainerBuilder">
            <summary>
            Gets the container builder.
            </summary>
        </member>
        <member name="P:OpenMod.API.Plugins.IPluginServiceConfigurationContext.WorkingDirectory">
            <summary>
            Gets the plugin working directory.
            </summary>
        </member>
        <member name="T:OpenMod.API.Plugins.PluginMetadataAttribute">
            <summary>
            Provides metadata for plugins. Assemblies which do not have this attribute will not be loaded as plugins.
            </summary>
        </member>
        <member name="P:OpenMod.API.Plugins.PluginMetadataAttribute.Id">
            <summary>
            Gets or sets the plugin ID. Must start with a letter and can only contain alphanumeric characters including dots.
            </summary>
        </member>
        <member name="P:OpenMod.API.Plugins.PluginMetadataAttribute.DisplayName">
            <summary>
            Gets or sets the human-readable name of the plugin.
            </summary>
        </member>
        <member name="P:OpenMod.API.Plugins.PluginMetadataAttribute.Author">
            <summary>
            Gets or sets the author of the plugin.
            </summary>
        </member>
        <member name="P:OpenMod.API.Plugins.PluginMetadataAttribute.Website">
            <summary>
            Gets or sets the website of the plugin.
            </summary>
        </member>
        <member name="P:OpenMod.API.Plugins.PluginMetadataAttribute.Description">
            <summary>
            Gets or sets the description of the plugin.
            </summary>
        </member>
        <member name="T:OpenMod.API.Prioritization.Priority">
            <summary>
            Represents priority.
            </summary>
        </member>
        <member name="F:OpenMod.API.Prioritization.Priority.Lowest">
            <summary>
            The lowest priority.
            </summary>
        </member>
        <member name="F:OpenMod.API.Prioritization.Priority.Low">
            <summary>
            The low priority.
            </summary>
        </member>
        <member name="F:OpenMod.API.Prioritization.Priority.Normal">
            <summary>
            The normal priority. This is the default priority.
            </summary>
        </member>
        <member name="F:OpenMod.API.Prioritization.Priority.High">
            <summary>
            The high priority.
            </summary>
        </member>
        <member name="F:OpenMod.API.Prioritization.Priority.Highest">
            <summary>
            The highest priority.
            </summary>
        </member>
        <member name="T:OpenMod.API.Prioritization.PriorityAttribute">
            <summary>
            Sets the priority for the given implementation.
            </summary>
        </member>
        <member name="T:OpenMod.API.Users.IUser">
            <summary>
            Represents an OpenMod user.
            </summary>
        </member>
        <member name="M:OpenMod.API.Users.IUser.SavePersistentDataAsync``1(System.String,``0)">
            <summary>
            Saves persistent data. T must be serializable.
            </summary>
        </member>
        <member name="M:OpenMod.API.Users.IUser.GetPersistentDataAsync``1(System.String)">
            <summary>
            Gets persistent data. T must be serializable.
            </summary>
        </member>
        <member name="P:OpenMod.API.Users.IUser.Session">
            <summary>
            Gets the current user session. Returns null if the user is not online.
            </summary>
        </member>
        <member name="P:OpenMod.API.Users.IUser.Provider">
            <summary>
            Gets the user provider for the user type.
            </summary>
        </member>
        <member name="T:OpenMod.API.Users.IUserDataSeeder">
            <summary>
            Service for seeding user data.
            </summary>
        </member>
        <member name="M:OpenMod.API.Users.IUserDataSeeder.SeedUserDataAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Seeds initial user data.
            </summary>
        </member>
        <member name="T:OpenMod.API.Users.IUserDataStore">
            <summary>
            The service for storing user data.
            </summary>
        </member>
        <member name="M:OpenMod.API.Users.IUserDataStore.GetUserDataAsync(System.String,System.String)">
            <summary>
            Gets user data.
            </summary>
            <param name="userId">The user id.</param>
            <param name="userType">The user actor type.</param>
            <returns>The user data.</returns>
        </member>
        <member name="M:OpenMod.API.Users.IUserDataStore.GetUserDataAsync``1(System.String,System.String,System.String)">
            <summary>
            Gets user data for the given key.
            </summary>
            <typeparam name="T">The user data type.</typeparam>
            <param name="userId">The user id.</param>
            <param name="userType">The user actor type.</param>
            <param name="key">The data key.</param>
            <returns>The deserialized data.</returns>
        </member>
        <member name="M:OpenMod.API.Users.IUserDataStore.SetUserDataAsync``1(System.String,System.String,System.String,``0)">
            <summary>
            Sets user data for the given key.
            </summary>
            <typeparam name="T">The user data type.</typeparam>
            <param name="userId">The user id.</param>
            <param name="userType">The user actor type.</param>
            <param name="key">The data key.</param>
            <param name="value">The value</param>
        </member>
        <member name="M:OpenMod.API.Users.IUserDataStore.GetUsersDataAsync(System.String)">
            <summary>
            Gets all user data for the given user type.
            </summary>
            <param name="type">The user type.</param>
            <returns>All user data for the given user type.</returns>
        </member>
        <member name="M:OpenMod.API.Users.IUserDataStore.SetUserDataAsync(OpenMod.API.Users.UserData)">
            <summary>
            Sets user data. Will replace data if it already exists.
            </summary>
            <param name="userData">The user data to set.</param>
        </member>
        <member name="T:OpenMod.API.Users.IUserManager">
            <summary>
            Service for managing users.
            </summary>
        </member>
        <member name="P:OpenMod.API.Users.IUserManager.UserProviders">
            <summary>
            Gets the user providers.
            </summary>
        </member>
        <member name="M:OpenMod.API.Users.IUserManager.GetUsersAsync(System.String)">
            <summary>
            Gets all users of the given type.
            </summary>
            <param name="userType">The type of the users to look for.</param>
            <returns>All users of the given type.</returns>
        </member>
        <member name="M:OpenMod.API.Users.IUserManager.FindUserAsync(System.String,System.String,OpenMod.API.Users.UserSearchMode)">
            <summary>
            Searches for an user.
            </summary>
            <param name="userType">The user type.</param>
            <param name="searchString">The user ID or name depending on the search mode.</param>
            <param name="searchMode">The search mode.</param>
            <returns><b>The user</b> if found; otherwise, null.</returns>
        </member>
        <member name="M:OpenMod.API.Users.IUserManager.BroadcastAsync(System.String,System.Nullable{System.Drawing.Color})">
            <summary>
            Broadcasts a message to all users.
            </summary>
            <param name="message">The message to broadcast.</param>
            <param name="color">The message color. May not be supported on all platforms.</param>
        </member>
        <member name="M:OpenMod.API.Users.IUserManager.BroadcastAsync(System.String,System.String,System.Nullable{System.Drawing.Color})">
            <summary>
            Broadcasts a message to all users of the given type.
            </summary>
            <param name="userType">The user type to broadcast to.</param>
            <param name="message">The message to broadcast.</param>
            <param name="color">The message color. May not be supported on all platforms.</param>
        </member>
        <member name="M:OpenMod.API.Users.IUserManager.BanAsync(OpenMod.API.Users.IUser,System.String,System.Nullable{System.DateTime})">
            <summary>
            Ban a user.
            </summary>
            <param name="user">The user to ban.</param>
            <param name="reason">The reason of the user ban.</param>
            <param name="endTime">The time when the ban will expire.</param>
        </member>
        <member name="M:OpenMod.API.Users.IUserManager.BanAsync(OpenMod.API.Users.IUser,OpenMod.API.Users.IUser,System.String,System.Nullable{System.DateTime})">
            <summary>
            Ban a user.
            </summary>
            <param name="user">The user to ban.</param>
            <param name="instigator">The user that ban.</param>
            <param name="reason">The reason of the user ban.</param>
            <param name="endTime">The time when the ban will expire.</param>
        </member>
        <member name="M:OpenMod.API.Users.IUserManager.KickAsync(OpenMod.API.Users.IUser,System.String)">
            <summary>
            KIck a user.
            </summary>
            <param name="user">The user to kick.</param>
            <param name="reason">The reason of the user kick.</param>
        </member>
        <member name="T:OpenMod.API.Users.IUserProvider">
            <summary>
            Provides users.
            </summary>
        </member>
        <member name="M:OpenMod.API.Users.IUserProvider.SupportsUserType(System.String)">
            <summary>
            Checks if the user provider supports the given user type.
            </summary>
            <param name="userType">The user type to check for.</param>
            <returns><b>True</b> if the user type is supported; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OpenMod.API.Users.IUserProvider.FindUserAsync(System.String,System.String,OpenMod.API.Users.UserSearchMode)">
            <summary>
            Searches for an user.
            </summary>
            <param name="userType">The user type.</param>
            <param name="searchString">The user ID or name depending on the search mode.</param>
            <param name="searchMode">The search mode.</param>
            <returns><b>The user</b> if found; otherwise, null.</returns>
        </member>
        <member name="M:OpenMod.API.Users.IUserProvider.GetUsersAsync(System.String)">
            <summary>
            Gets all users of the given type.
            </summary>
            <param name="userType">The type of the users to look for.</param>
            <returns>All users of the given type.</returns>
        </member>
        <member name="M:OpenMod.API.Users.IUserProvider.BroadcastAsync(System.String,System.Nullable{System.Drawing.Color})">
            <summary>
            Broadcasts a message to all users.
            </summary>
            <param name="message">The message to broadcast.</param>
            <param name="color">The message color. May not be supported on all platforms.</param>
        </member>
        <member name="M:OpenMod.API.Users.IUserProvider.BroadcastAsync(System.String,System.String,System.Nullable{System.Drawing.Color})">
            <summary>
            Broadcasts a message to all users of the given type.
            </summary>
            <param name="userType">The user type to broadcast to.</param>
            <param name="message">The message to broadcast.</param>
            <param name="color">The message color. May not be supported on all platforms.</param>
        </member>
        <member name="M:OpenMod.API.Users.IUserProvider.BanAsync(OpenMod.API.Users.IUser,System.String,System.Nullable{System.DateTime})">
            <summary>
            Ban a user.
            </summary>
            <param name="user">The user to ban.</param>
            <param name="reason">The reason of the user ban.</param>
            <param name="endTime">The time when the ban will expire.</param>
        </member>
        <member name="M:OpenMod.API.Users.IUserProvider.BanAsync(OpenMod.API.Users.IUser,OpenMod.API.Users.IUser,System.String,System.Nullable{System.DateTime})">
            <summary>
            Ban a user.
            </summary>
            <param name="user">The user to ban.</param>
            <param name="instigator">The user that ban.</param>
            <param name="reason">The reason of the user ban.</param>
            <param name="endTime">The time when the ban will expire.</param>
        </member>
        <member name="M:OpenMod.API.Users.IUserProvider.KickAsync(OpenMod.API.Users.IUser,System.String)">
            <summary>
            KIck a user.
            </summary>
            <param name="user">The user to kick.</param>
            <param name="reason">The reason of the user kick.</param>
        </member>
        <member name="T:OpenMod.API.Users.IUserSession">
            <summary>
            Represents a user session.
            </summary>
        </member>
        <member name="P:OpenMod.API.Users.IUserSession.SessionStartTime">
            <summary>
            Gets the time the session has begun. Returns null if the session has not started.
            </summary>
            <example>
            The time a user has joined a server.
            </example>
        </member>
        <member name="P:OpenMod.API.Users.IUserSession.SessionEndTime">
            <summary>
            Gets the time the users session has ended. Return null if the session has not started or has not ended yet.
            </summary>
            <example>
            The time a user has left a server.
            </example>
        </member>
        <member name="P:OpenMod.API.Users.IUserSession.SessionData">
            <summary>
            Gets the user data for this session.
            </summary>
        </member>
        <member name="P:OpenMod.API.Users.IUserSession.InstanceData">
            <summary>
            Gets the user data that is stored for process lifetime and will survive reloads.
            </summary>
        </member>
        <member name="M:OpenMod.API.Users.IUserSession.DisconnectAsync(System.String)">
            <summary>
            Disconnects the user.
            </summary>
            <param name="reason">The optional disconnect reason to be showed to the user.</param>
        </member>
        <member name="T:OpenMod.API.Users.UserData">
            <summary>
            Serialized user data.
            </summary>
        </member>
        <member name="P:OpenMod.API.Users.UserData.Id">
            <summary>
            Gets or sets the ID of the user.
            </summary>
        </member>
        <member name="P:OpenMod.API.Users.UserData.Type">
            <summary>
            Gets or sets the actor type of the user.
            </summary>
        </member>
        <member name="P:OpenMod.API.Users.UserData.LastDisplayName">
            <summary>
            Gets or sets the last known display name of the user.
            </summary>
        </member>
        <member name="P:OpenMod.API.Users.UserData.FirstSeen">
            <summary>
            Gets or sets the first time the user has been seen.
            </summary>
        </member>
        <member name="P:OpenMod.API.Users.UserData.LastSeen">
            <summary>
            Gets or sets the last time the user has been seen.
            </summary>
        </member>
        <member name="P:OpenMod.API.Users.UserData.BanInfo">
            <summary>
            Gets the data related to user ban.
            </summary>
        </member>
        <member name="P:OpenMod.API.Users.UserData.Permissions">
            <summary>
            Gets or sets the permissions of the user.
            </summary>
        </member>
        <member name="P:OpenMod.API.Users.UserData.Roles">
            <summary>
            Gets or sets the roles of the user.
            </summary>
        </member>
        <member name="P:OpenMod.API.Users.UserData.Data">
            <summary>
            Gets the user data. Plugins should use the <see cref="T:OpenMod.API.Users.IUserDataStore"/> service to interact with this data.
            </summary>
        </member>
        <member name="T:OpenMod.API.Users.UserSearchMode">
            <summary>
            Defines user search modes.
            </summary>
        </member>
        <member name="F:OpenMod.API.Users.UserSearchMode.FindById">
            <summary>
            Find user by ID.
            </summary>
        </member>
        <member name="F:OpenMod.API.Users.UserSearchMode.FindByName">
            <summary>
            Find user by name.
            </summary>
        </member>
        <member name="F:OpenMod.API.Users.UserSearchMode.FindByNameOrId">
            <summary>
            Find user by name or ID. ID matches will be prioritized.
            </summary>
        </member>
    </members>
</doc>
